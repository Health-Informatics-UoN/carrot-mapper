# Generated by Django 4.2.13 on 2024-10-15 09:00

from django.db import migrations, models
import django.db.models.deletion


def migrate_status_data_forwards(apps, schema_editor):
    ScanReport = apps.get_model("mapping", "ScanReport")
    UploadStatus = apps.get_model("mapping", "UploadStatus")
    MappingStatus = apps.get_model("mapping", "MappingStatus")

    # Create a mapping of old status values to new UploadStatus and MappingStatus instances
    status_mapping = {
        "UPINPRO": (
            UploadStatus.objects.get(value="IN_PROGRESS"),
            MappingStatus.objects.get(value="PENDING"),
        ),
        "UPCOMPL": (
            UploadStatus.objects.get(value="COMPLETE"),
            MappingStatus.objects.get(value="PENDING"),
        ),
        "UPFAILE": (
            UploadStatus.objects.get(value="FAILED"),
            MappingStatus.objects.get(value="PENDING"),
        ),
        "PENDING": (
            UploadStatus.objects.get(value="COMPLETE"),
            MappingStatus.objects.get(value="PENDING"),
        ),
        "INPRO25": (
            UploadStatus.objects.get(value="COMPLETE"),
            MappingStatus.objects.get(value="MAPPING_25PERCENT"),
        ),
        "INPRO50": (
            UploadStatus.objects.get(value="COMPLETE"),
            MappingStatus.objects.get(value="MAPPING_50PERCENT"),
        ),
        "INPRO75": (
            UploadStatus.objects.get(value="COMPLETE"),
            MappingStatus.objects.get(value="MAPPING_75PERCENT"),
        ),
        "COMPLET": (
            UploadStatus.objects.get(value="COMPLETE"),
            MappingStatus.objects.get(value="COMPLETE"),
        ),
        "BLOCKED": (
            UploadStatus.objects.get(value="COMPLETE"),
            MappingStatus.objects.get(value="BLOCKED"),
        ),
    }

    for report in ScanReport.objects.all():
        if hasattr(report, "status"):  # Check if the old status field exists
            upload_status, mapping_status = status_mapping.get(
                report.status, (None, None)
            )
            if upload_status:
                report.upload_status = upload_status
            if mapping_status:
                report.mapping_status = mapping_status
            report.save()


def migrate_status_data_backwards(apps, schema_editor):
    ScanReport = apps.get_model("mapping", "ScanReport")

    # Mapping of new status combinations to old status values
    reverse_mapping = {
        ("IN_PROGRESS", "PENDING"): "UPINPRO",
        ("COMPLETE", "PENDING"): "UPCOMPL",
        ("FAILED", "PENDING"): "UPFAILE",
        ("COMPLETE", "PENDING"): "PENDING",
        ("COMPLETE", "MAPPING_25PERCENT"): "INPRO25",
        ("COMPLETE", "MAPPING_50PERCENT"): "INPRO50",
        ("COMPLETE", "MAPPING_75PERCENT"): "INPRO75",
        ("COMPLETE", "COMPLETE"): "COMPLET",
        ("COMPLETE", "BLOCKED"): "BLOCKED",
    }

    for report in ScanReport.objects.all():
        upload_status = report.upload_status
        mapping_status = report.mapping_status
        old_status = reverse_mapping.get(
            (
                (upload_status.value, mapping_status.value)
                if upload_status and mapping_status
                else (None, None)
            ),
            "UPINPRO",
        )  # Default to 'UPINPRO' if no match
        report.status = old_status
        report.save()


class Migration(migrations.Migration):

    dependencies = [
        ("mapping", "0004_mappingstatus_uploadstatus"),
    ]

    operations = [
        migrations.AddField(
            model_name="scanreport",
            name="mapping_status",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="mapping_status",
                to="mapping.mappingstatus",
            ),
        ),
        migrations.AddField(
            model_name="scanreport",
            name="upload_status",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="upload_status",
                to="mapping.uploadstatus",
            ),
        ),
        migrations.RunPython(
            migrate_status_data_forwards, migrate_status_data_backwards
        ),
        migrations.RemoveField(
            model_name="scanreport",
            name="status",
        ),
    ]
