"use client";

import { Badge } from "@/components/ui/badge";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger
} from "@/components/ui/tooltip";
import { format } from "date-fns/format";
import { Brain, Star, Zap } from "lucide-react";

interface MappingRecommendationsProps {
  recommendations: MappingRecommendation[];
  onAcceptRecommendation?: (recommendation: MappingRecommendation) => void;
  canEdit?: boolean;
}

export function MappingRecommendations({
  recommendations,
  onAcceptRecommendation,
  canEdit = false
}: MappingRecommendationsProps) {
  if (!recommendations || recommendations.length === 0) {
    return (
      <div className="text-sm text-muted-foreground">
        No recommendations available
      </div>
    );
  }

  return (
    <div className="space-y-3">
      <div className="flex items-center gap-2 text-sm font-medium">
        <Brain className="h-4 w-4 text-blue-600" />
        AI Recommendations ({recommendations.length})
      </div>

      <div className="space-y-2">
        {recommendations.map((recommendation) => (
          <Card
            key={recommendation.id}
            className="border-l-4 border-l-blue-500"
          >
            <CardHeader className="pb-2">
              <div className="flex items-start justify-between">
                <div className="flex-1">
                  <CardTitle className="text-sm font-medium">
                    {recommendation.concept.concept_name}
                  </CardTitle>
                  <div className="flex items-center gap-2 mt-1">
                    <Badge variant="secondary" className="text-xs">
                      {recommendation.concept.concept_code}
                    </Badge>
                    {recommendation.score && (
                      <div className="flex items-center gap-1">
                        <Star className="h-3 w-3 text-yellow-500 fill-current" />
                        <span className="text-xs text-muted-foreground">
                          {Math.round(recommendation.score * 100)}%
                        </span>
                      </div>
                    )}
                  </div>
                </div>

                {canEdit && onAcceptRecommendation && (
                  <TooltipProvider>
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <button
                          onClick={() => onAcceptRecommendation(recommendation)}
                          className="p-1 hover:bg-blue-50 rounded-md transition-colors"
                          title="Accept this recommendation"
                        >
                          <Zap className="h-4 w-4 text-blue-600" />
                        </button>
                      </TooltipTrigger>
                      <TooltipContent>
                        <p>Accept this recommendation</p>
                      </TooltipContent>
                    </Tooltip>
                  </TooltipProvider>
                )}
              </div>
            </CardHeader>

            <CardContent className="pt-0">
              <div className="flex items-center justify-between text-xs text-muted-foreground">
                <div className="flex items-center gap-2">
                  <span>Generated by {recommendation.tool_name}</span>
                  {recommendation.tool_version && (
                    <Badge variant="outline" className="text-xs">
                      v{recommendation.tool_version}
                    </Badge>
                  )}
                </div>
                <span>
                  {format(new Date(recommendation.created_at), "MMM dd, yyyy")}
                </span>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  );
}
