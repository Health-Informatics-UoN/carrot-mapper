"use client";

import { ColumnDef } from "@tanstack/react-table";
import { DataTableColumnHeader } from "@/components/data-table/DataTableColumnHeader";
import { Button } from "@/components/ui/button";
import { Download } from "lucide-react";
import { format } from "date-fns/format";
import { saveAs } from "file-saver";
import { Badge } from "@/components/ui/badge";
import { downloadFile } from "@/api/files";
import { toast } from "sonner";
import { FileDownload } from "@/types/files";

export const columns: ColumnDef<FileDownload>[] = [
  {
    id: "Created",
    accessorKey: "created_at",
    header: ({ column }) => (
      <DataTableColumnHeader
        column={column}
        title="Created"
        sortName="created_at"
      />
    ),
    cell: ({ row }) => {
      const { created_at } = row.original;
      return format(created_at, "d MMM HH:mm");
    },
    enableHiding: true,
    enableSorting: true
  },
  {
    id: "User",
    accessorKey: "user",
    header: ({ column }) => (
      <DataTableColumnHeader
        column={column}
        title="Generated By"
        sortName="user"
      />
    ),
    cell: ({ row }) => {
      const { user } = row.original;
      return <>{user.username}</>;
    },
    enableHiding: true,
    enableSorting: false
  },
  {
    id: "Type",
    accessorKey: "file_type",
    header: ({ column }) => (
      <DataTableColumnHeader
        column={column}
        title="File Type"
        sortName="file_type"
      />
    ),
    cell: ({ row }) => {
      const { file_type } = row.original;
      return <Badge variant="outline">{file_type.display_name}</Badge>;
    },
    enableHiding: true,
    enableSorting: false
  },
  {
    id: "Download",
    header: ({ column }) => <DataTableColumnHeader column={column} title="" />,
    cell: ({ row }) => {
      const { id, scan_report, name } = row.original;
      const handleDownload = async () => {
        const response = await downloadFile(scan_report, id);
        if (response.success && response.blob) {
          // Use the blob directly
          saveAs(response.blob, name);
        } else {
          toast.error(
            `Error downloading file: ${(response.errorMessage as any).message}`
          );
        }
      };
      return (
        <Button variant={"outline"} onClick={handleDownload}>
          Download <Download />
        </Button>
      );
    },
    enableHiding: true,
    enableSorting: false
  }
];
